// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data;

namespace Repository.Migrations
{
    [DbContext(typeof(ThemegeniuslabDbContext))]
    [Migration("20200519065354_InitialCreateAgain")]
    partial class InitialCreateAgain
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Repository.Models.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BaseEntities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEntity");
                });

            modelBuilder.Entity("Repository.Models.AboutUs", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<int?>("AboutUsItemId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AboutUsItemId");

                    b.HasDiscriminator().HasValue("AboutUs");
                });

            modelBuilder.Entity("Repository.Models.AboutUsItem", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("AboutUsItem_Text")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("AboutUsItem_Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AboutUsItem");
                });

            modelBuilder.Entity("Repository.Models.Agent", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("Agent_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Agent");
                });

            modelBuilder.Entity("Repository.Models.Area", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("Area_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnName("Area_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnName("Area_Subtitle")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Area_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Area");
                });

            modelBuilder.Entity("Repository.Models.BestPlan", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("BestPlan_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageText")
                        .IsRequired()
                        .HasColumnName("BestPlan_ImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SubDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnName("BestPlan_Subtitle")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("BestPlan_Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("BestPlan_Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("BestPlan");
                });

            modelBuilder.Entity("Repository.Models.Blog", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("Blog_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("Blog_Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Blog_Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Blog");
                });

            modelBuilder.Entity("Repository.Models.CaseStudy", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("CaseStudy_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("CaseStudy_Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CategoryId");

                    b.HasDiscriminator().HasValue("CaseStudy");
                });

            modelBuilder.Entity("Repository.Models.CaseStudySpec", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<int>("CaseStudyId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderBy")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CaseStudySpec");
                });

            modelBuilder.Entity("Repository.Models.Category", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Category_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Category");
                });

            modelBuilder.Entity("Repository.Models.Comment", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Comment_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Comment_Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("Comment_Text")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Comment");
                });

            modelBuilder.Entity("Repository.Models.Contact", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("ContactSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Contact_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Contact_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Contact_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("Contact_Text")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasDiscriminator().HasValue("Contact");
                });

            modelBuilder.Entity("Repository.Models.ContactUs", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Email1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ContactUs");
                });

            modelBuilder.Entity("Repository.Models.Faq", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Faq");
                });

            modelBuilder.Entity("Repository.Models.Post", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<DateTime>("Date")
                        .HasColumnName("Post_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnName("Post_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnName("Post_Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Post");
                });

            modelBuilder.Entity("Repository.Models.Service", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnName("Service_Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Service_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnName("Service_Subtitle")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Service_Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Service");
                });

            modelBuilder.Entity("Repository.Models.ServiceSpec", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("ServiceSpec_Key")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("OrderBy")
                        .HasColumnName("ServiceSpec_OrderBy")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("ServiceSpec_Value")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasIndex("ServiceId");

                    b.HasDiscriminator().HasValue("ServiceSpec");
                });

            modelBuilder.Entity("Repository.Models.Setting", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Setting_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnName("Setting_Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnName("Setting_Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeedAnAgentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Setting_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SocialMediaId")
                        .HasColumnType("int");

                    b.HasIndex("SocialMediaId");

                    b.HasDiscriminator().HasValue("Setting");
                });

            modelBuilder.Entity("Repository.Models.SliderItem", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("SliderItem_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderBy")
                        .HasColumnName("SliderItem_OrderBy")
                        .HasColumnType("int");

                    b.Property<string>("Slogan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("SliderItem_Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SliderItem");
                });

            modelBuilder.Entity("Repository.Models.SocialMedia", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SocialMedia");
                });

            modelBuilder.Entity("Repository.Models.Tag", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Tag_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Tag");
                });

            modelBuilder.Entity("Repository.Models.Testimonial", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Testimonial_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnName("Testimonial_Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnName("Testimonial_Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Testimonial_Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Testimonial");
                });

            modelBuilder.Entity("Repository.Models.AboutUs", b =>
                {
                    b.HasOne("Repository.Models.AboutUsItem", "AboutUsItem")
                        .WithMany()
                        .HasForeignKey("AboutUsItemId");
                });

            modelBuilder.Entity("Repository.Models.CaseStudy", b =>
                {
                    b.HasOne("Repository.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Models.ServiceSpec", b =>
                {
                    b.HasOne("Repository.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Models.Setting", b =>
                {
                    b.HasOne("Repository.Models.SocialMedia", "SocialMedia")
                        .WithMany()
                        .HasForeignKey("SocialMediaId");
                });
#pragma warning restore 612, 618
        }
    }
}
